pi
sin(pi)
sin(0)
sin(90)
rnorm(0,0.5**2)
?rnorm
rnorm(1,0,0.5**2)
rnorm(1,0,0.5**2)
rnorm(1,0,0.5**2)
rnorm(1,0,0.5**2)
2**2
2^2
2^3
f = function(x,y) {
return(4*sin(pi*x) + 2*cos(pi*y) + rnorm(1,0,0.5**2))
}
runif(100,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
?runif
data1 = runif(100,-1,1)
data1
data1 = bind(runif(100,-1,1),runif(100,-1,1))
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
str(data1)
data1
apply(data1, 2, f)
apply(data1, MARGIN = 2, FUN = f)
?apply
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data1
apply(data1, 2, f)
apply(data1, 1, f)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
runf(data1)
runf(data2)
runf(data3)
runf(data4)
runf(data1)
runf = function(x) {
patata <<- 66
return(apply(x,1,f))
}
runf(data1)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
patata <<- 66
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
rm(list=ls())
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
result1
result2
?nnet
library(MASS)
library(nnet)
?nnet
model.nnet = nnet(x = data1, y = result1)
model.nnet = nnet(x = data1, y = result1, size = 10)
model.nnet
class(model.nnet)
model.nnet$n
model.nnet$wts
model.nnet$value
summary(model.nnet)
p = predict(model.nnet, type="class")
?predict
?nnet
p = predict(model.nnet)
p
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
plot(model.nnet)
p1 = predict(model.nnet)
t1 = table(p1, data1[learn])
N = length(data1)
learn <- sample(1:N, round(2*N/3))
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
p1 = predict(model.nnet)
t1 = table(p1, data1[learn])
length(p1)
t1 = table(p1, data1)
length(p1)
length(data1)
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
N = length(data1)
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
p1 = predict(model.nnet)
t1 = table(p1, data1)
library(nnet)
library(MASS)
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
gendata()
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
p1 = predict(model.nnet)
t1 = table(p1, data1)
length(p1)
length(data1)
t1 = table(p1, result1)
t1
error_rate.learn <- 100*(1-sum(diag(t1))/nlearn)
learn
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
nlearn = length(learn)
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 10)
p1 = predict(model.nnet)
t1 = table(p1, result1)
error_rate.learn <- 100*(1-sum(diag(t1))/nlearn)
error_rate.learn
p1
result1
class(p1)
class(result1)
class(t1)
summary(t1)
head(t1)
head(t1)
t1[1]
t1[2]
t1[2,1]
dim(t1)
t1[1]
t1[2]
t1[4]
t1[3,]
t1[1,]
t1[,1]
t1[,2]
str(t1)
summary(t1)
?table
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
nlearn = length(learn)
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 50)
p1 = predict(model.nnet)
p1
summary(p1)
result1
data1
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
class(data1)
df1 = as.data.frame(data1)
df1
names(df1) = c("x1","x2")
df1
head(df1)
class(result1)
cbind(df1, result1)
m = cbind(df1, result1)
class(m)
names(m)
names(m) = c("x1","x2","target")
df1
m
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
df1 = cbind(data1, result1)
}
gendata()
df1 = cbind(data1, result1)
df1
head(df1)
class(df1)
?as.data.frame
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
df1 <<- as.data.frame(cbind(data1, result1), col.names = c("x1","x2","target"))
}
gendata()
df1
head(df1)
m = cbind(data1, result1)
class(matrix)
class(m)
m2 = as.data.frame(m)
m2
head(m2)
m2 = as.data.frame(m, colnames(c("x1","x2","target")))
head(m2)
names(m2) = c("x1","x2","target")
head(m2)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
df1(names) = nm
}
gendata()
df1
head(df1)
rm(df1)
gendata()
rm(df1)
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
names(df1) = nm
}
gendata()
head(df1)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
names(df1) <<- nm
}
gendata()
head(df1)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
df2 <<- as.data.frame(cbind(data2, result2))
df3 <<- as.data.frame(cbind(data3, result3))
df4 <<- as.data.frame(cbind(data4, result4))
names(df1) <<- nm
names(df2) <<- nm
names(df3) <<- nm
names(df4) <<- nm
}
gendata()
head(df1)
head(df2)
head(df3)
N = nrow(data1)
N = nrow(df1)
learn <- sample(1:N, round(2*N/3))
nlearn = length(learn)
model.nnet = nnet(target ~ . , data = df1, subset = learn, size = 50)
model.nnet
summary(model.nnet)
model.nnet$value
?nnet
p1 = predict(model.nnet, df1, type = "raw")
p1
model.nnet$wts
summary(p1)
learn
model.nnet = nnet(target ~ . , data = df1, subset = learn, size = 5)
p1 = predict(model.nnet, df1, type = "raw")
p1
model.nnet = nnet(target ~ . , data = df1, linout = TRUE, subset = learn, size = 5)
model.nnet = nnet(target ~ . , data = df1, linout = TRUE, subset = learn, size = 5, maxit = 500)
p1 = predict(model.nnet, df1, type = "raw")
p1
t1 = table(p1, df1$target)
t1
plot(t1)
error_rate.learn <- 100*(1-sum(diag(t1))/nlearn)
error_rate.learn
p1
df1$target
df1$target - t1
dif = df1$target - t1
class(dif)
dim(dif)
class(df1$target)
class(t1)
dif = df1$target - as.numeric(t1)
class(dif)
dim(dif)
length(dif)
a = df1$target
b = p1
b
class(b)
dim(b)
b = as.numeric(b)
b
a
a - b
c = a-b
c
c = abs(c)
c
c = c^2
c
hh = c(1,2,3)
hh
hh^2
c
sum(c)
model.nnet$value
model.nnet$n
model.nnet$value
