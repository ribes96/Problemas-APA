result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
N = nrow(data1)
learn <- sample(1:N, round(2*N/3))
nlearn = length(learn)
model.nnet = nnet(x = data1, y = result1, subset = learn, size = 50)
p1 = predict(model.nnet)
p1
summary(p1)
result1
data1
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
}
gendata()
class(data1)
df1 = as.data.frame(data1)
df1
names(df1) = c("x1","x2")
df1
head(df1)
class(result1)
cbind(df1, result1)
m = cbind(df1, result1)
class(m)
names(m)
names(m) = c("x1","x2","target")
df1
m
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
df1 = cbind(data1, result1)
}
gendata()
df1 = cbind(data1, result1)
df1
head(df1)
class(df1)
?as.data.frame
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 <<- cbind(runif(100,-1,1),runif(100,-1,1))
data2 <<- cbind(runif(200,-1,1),runif(200,-1,1))
data3 <<- cbind(runif(500,-1,1),runif(500,-1,1))
data4 <<- cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 <<- runf(data1)
result2 <<- runf(data2)
result3 <<- runf(data3)
result4 <<- runf(data4)
df1 <<- as.data.frame(cbind(data1, result1), col.names = c("x1","x2","target"))
}
gendata()
df1
head(df1)
m = cbind(data1, result1)
class(matrix)
class(m)
m2 = as.data.frame(m)
m2
head(m2)
m2 = as.data.frame(m, colnames(c("x1","x2","target")))
head(m2)
names(m2) = c("x1","x2","target")
head(m2)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
df1(names) = nm
}
gendata()
df1
head(df1)
rm(df1)
gendata()
rm(df1)
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
names(df1) = nm
}
gendata()
head(df1)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
names(df1) <<- nm
}
gendata()
head(df1)
library(MASS)
library(nnet)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
runf = function(x) {
return(apply(x,1,f))
}
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
df2 <<- as.data.frame(cbind(data2, result2))
df3 <<- as.data.frame(cbind(data3, result3))
df4 <<- as.data.frame(cbind(data4, result4))
names(df1) <<- nm
names(df2) <<- nm
names(df3) <<- nm
names(df4) <<- nm
}
gendata()
head(df1)
head(df2)
head(df3)
N = nrow(data1)
N = nrow(df1)
learn <- sample(1:N, round(2*N/3))
nlearn = length(learn)
model.nnet = nnet(target ~ . , data = df1, subset = learn, size = 50)
model.nnet
summary(model.nnet)
model.nnet$value
?nnet
p1 = predict(model.nnet, df1, type = "raw")
p1
model.nnet$wts
summary(p1)
learn
model.nnet = nnet(target ~ . , data = df1, subset = learn, size = 5)
p1 = predict(model.nnet, df1, type = "raw")
p1
model.nnet = nnet(target ~ . , data = df1, linout = TRUE, subset = learn, size = 5)
model.nnet = nnet(target ~ . , data = df1, linout = TRUE, subset = learn, size = 5, maxit = 500)
p1 = predict(model.nnet, df1, type = "raw")
p1
t1 = table(p1, df1$target)
t1
plot(t1)
error_rate.learn <- 100*(1-sum(diag(t1))/nlearn)
error_rate.learn
p1
df1$target
df1$target - t1
dif = df1$target - t1
class(dif)
dim(dif)
class(df1$target)
class(t1)
dif = df1$target - as.numeric(t1)
class(dif)
dim(dif)
length(dif)
a = df1$target
b = p1
b
class(b)
dim(b)
b = as.numeric(b)
b
a
a - b
c = a-b
c
c = abs(c)
c
c = c^2
c
hh = c(1,2,3)
hh
hh^2
c
sum(c)
model.nnet$value
model.nnet$n
model.nnet$value
library(MASS)
library(nnet)
library(caret)
f = function(x) {
return(4*sin(pi*x[1]) + 2*cos(pi*x[2]) + rnorm(1,0,0.5**2))
}
trc <- trainControl (method="repeatedcv", number=10, repeats=5)
model1 <- train (
target ~.,
data = df1,
method='nnet',
metric = "Accuracy",
trControl=trc)
gendata()
gendata = function() {
data1 = cbind(runif(100,-1,1),runif(100,-1,1))
data2 = cbind(runif(200,-1,1),runif(200,-1,1))
data3 = cbind(runif(500,-1,1),runif(500,-1,1))
data4 = cbind(runif(1000,-1,1),runif(1000,-1,1))
result1 = runf(data1)
result2 = runf(data2)
result3 = runf(data3)
result4 = runf(data4)
nm = c("x1","x2","target")
df1 <<- as.data.frame(cbind(data1, result1))
df2 <<- as.data.frame(cbind(data2, result2))
df3 <<- as.data.frame(cbind(data3, result3))
df4 <<- as.data.frame(cbind(data4, result4))
names(df1) <<- nm
names(df2) <<- nm
names(df3) <<- nm
names(df4) <<- nm
}
gendata()
runf = function(x) {
return(apply(x,1,f))
}
gendata()
trc <- trainControl (method="repeatedcv", number=10, repeats=5)
model1 <- train (
target ~.,
data = df1,
method='nnet',
metric = "Accuracy",
trControl=trc)
model1 <- train (
target ~.,
data = df1,
method='nnet',
metric = "RMSE",
trControl=trc)
model1 <- train (
target ~.,
data = df1,
linout = TRUE
method='nnet',
metric = "RMSE",
trControl=trc)
model1 <- train (
target ~.,
data = df1,
linout = TRUE,
method='nnet',
metric = "RMSE",
trControl=trc)
model2 <- train (
target ~.,
data = df2,
linout = TRUE,
method='nnet',
metric = "RMSE",
trControl=trc)
model3 <- train (
target ~.,
data = df3,
linout = TRUE,
method='nnet',
metric = "RMSE",
trControl=trc)
model4 <- train (
target ~.,
data = df4,
linout = TRUE,
method='nnet',
metric = "RMSE",
trControl=trc)
test_data = cbind(runif(1024,-1,1),runif(1024,-1,1))
test_result = runf(test_data)
test <<- as.data.frame(cbind(test_data, test_result))
names(test) <<- nm
nm = c("x1","x2","target")
names(test) <<- nm
test <<- as.data.frame(cbind(test_data, test_result))
names(test) <<- nm
test <<- as.data.frame(cbind(test_data, test_result))
names(test) <<- nm
test
names(test)
names(test) = c("x1","x2","target")
names(test)
rm(test_result)
rm(test_data)
rm(nm)
p1 = predict(model1, test)
p1
model1
?confusionMatrix
p1 = predict(model1, test)
p2 = predict(model2, test)
p3 = predict(model3, test)
p4 = predict(model4, test)
confusionMatrix(p1, test$target)
plot(model1)
plot(model2)
print(p1)
print(abs(p1 - test$target))
plot(abs(p1 - test$target))
print(model1)
?RMSE
postResample(p1, test$target)
postResample(p2, test$target)
postResample(p3, test$target)
postResample(p4, test$target)
postResample(test$target, test$target)
postResample(p4, test$target)
model1
model2
model3
model4
?train
model1
model2
model3
model4
model1
?RMSE
postResample(p1, test$target)
postResample(p2, test$target)
postResample(p3, test$target)
postResample(p4, test$target)
model1 <- train (
target ~.,
data = df1,
linout = TRUE,
method='nnet',
metric = "RMSE",
decay = 0.1,
trControl=trc)
warnings()
nnetGrid <-  expand.grid(size = seq(from = 1, to = 10, by = 1),
decay = seq(from = 0.1, to = 0.5, by = 0.1))
model1 <- train (
target ~.,
data = df1,
linout = TRUE,
method='nnet',
metric = "RMSE",
tuneGrid = nnetGrid,
trControl=trc)
model2 <- train (
target ~.,
data = df2,
linout = TRUE,
method='nnet',
metric = "RMSE",
tuneGrid = nnetGrid,
trControl=trc)
model3 <- train (
target ~.,
data = df3,
linout = TRUE,
method='nnet',
metric = "RMSE",
tuneGrid = nnetGrid,
trControl=trc)
model4 <- train (
target ~.,
data = df4,
linout = TRUE,
method='nnet',
metric = "RMSE",
tuneGrid = nnetGrid,
trControl=trc)
model1
model2
model3
model4
p1 = predict(model1, test)
p2 = predict(model2, test)
p3 = predict(model3, test)
p4 = predict(model4, test)
postResample(p1, test$target)
postResample(p2, test$target)
postResample(p3, test$target)
postResample(p4, test$target)
library(stargazer)
r1 = postResample(p1, test$target)
r2 = postResample(p2, test$target)
r3 = postResample(p3, test$target)
r4 = postResample(p4, test$target)
class(r1)
r1
r = rbind(r1,r2,r3)
r
stargazer(r)
r = rbind(r1,r2,r3,r4)
r1
r
stargazer(r)
model1
model1$decay
model1$modelInfo
model1$bestTune
model1$bestTune[1]
model1$bestTune[2]
r1 = c(r1, model1$bestTune)
r1
r2 = c(r2, model2$bestTune)
rbind(r1,r2)
r1 = c(r1, model1$bestTune)
r2 = c(r2, model2$bestTune)
r3 = c(r3, model3$bestTune)
r4 = c(r4, model4$bestTune)
r = rbind(r1,r2,r3,r4)
r1
r2
rbind(r1)
rbind(r1,r2)
rbind(r1,r2,r3)
r3 = c(r3, model3$bestTune)
r3
rbind(r2,r3)
rbind(r1,r2,r3)
r4 = c(r4, model4$bestTune)
rbind(r1,r2,r3,r4)
r = rbind(r1,r2,r3,r4)
stargazer(r)
r
r1
r1 = postResample(p1, test$target)
r2 = postResample(p2, test$target)
r3 = postResample(p3, test$target)
r4 = postResample(p4, test$target)
r1 = c(r1, model1$bestTune)
r2 = c(r2, model2$bestTune)
r3 = c(r3, model3$bestTune)
r4 = c(r4, model4$bestTune)
r = rbind(r1,r2,r3,r4)
r
stargazer(r)
