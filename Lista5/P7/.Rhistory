nest = c(
1,2,5,10,20,50,100,200
)
plot(type = "l", nest, rf)
plot(type = "l", nest, rf, xlab = "Number of estimators", ylab = "Accuracy", main = "Accuracy on Random Forest")
boost = c(
0.481,
0.504,
0.515,
0.521,
0.531,
0.540,
0.546,
0.547
)
plot(type = "l", nest, boost, xlab = "Number of estimators", ylab = "Accuracy", main = "Accuracy on AdaBoost")
mydata = read.table("letters.txt")
getwd()
setwd("/home/hobber/git/Problemas-APA/Lista5/P7")
mydata = read.table("letters.txt")
nchanges = rpois(20,1.01)
class(mydata)
mydata
head(mydata)
corrupt = function(bit_vector, nchanges) {
changes = sample(35, nchanges)
g = rep(35, 0)
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
a = rep(10,1)
a
a = rep(1,10)
a
b = corrupt(a, 5)
?rep
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(length(bit_vector), 0)
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
b = corrupt(a, 5)
b
bit_vector = rep(1,10)
nchanges = 5
bit_vector
changes = sample(length(bit_vector), nchanges)
changes
g = rep(length(bit_vector), 0)
g
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
a
b = corrupt(a,5)
b
mydata
tirabits = mydata[1,]
tirabits
class(tirabits)
tirabits = mydata[1,-36]
tirabits
tirabits
corrupt(tirabits, 5)
?sample
g = sample(1:nrow(df), n, replace = TRUE)
g = sample(1:26, n, replace = TRUE)
g = sample(1:26, 50, replace = TRUE)
g
ch = rpois(n, 1.01)
ch = rpois(50, 1.01)
ch
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
}
mydata
b = generate_corrupt(mydata, 50)
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
head(b)
mydata[1,36]
mydata = read.table("letters.txt")
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
return(new_data)
}
df = mydata
n = 50
changes = sample(length(bit_vector), nchanges)
g = sample(1:nrow(df), n, replace = TRUE)
g
ch = rpois(n, 1.01)
ch
new_data = data.frame()
new_data
i = 1
elem = g[i]
elem
df[elem,-36]
new_vector = corrupt(df[elem, -36], ch[i])
new_vector
ch[i]
newrow = c(new_vector, df[elem, 36])
newrow
df[elem,36]
class(new_vector)
class(mydata[1,])
new_vector = as.data.frame(corrupt(df[elem, -36], ch[i]))
new_vector
new_vector = corrupt(df[elem, -36], ch[i])
new_vector
newrow = c(new_vector, df[elem, 36])
newrow
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data
new_data[i,36] = df[elem, 36]
new_data
ncol(new_data)
df[elem, 36]
df[i, 36]
new_data[i, 36]
new_data[i,36] = df[elem, 36]
new_data[i,36]
mydata
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
new_data
rm(new_data)
new_data = data.frame()
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
new_data
mydata = read.table("letters.txt")
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
nm = c(1:36, "letter")
nm
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
library(nnet)
?nnet
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
let_data = generate_corrupt(mydata, 50)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
let_data
colnames(let_data)
head(let_data)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
class(let_data)
class(let_data[1,1])
?as.factor
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
#new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
let_data
class(let_data[1,36])
?nnet
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.factor(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
let_data
class(let_data[1,36])
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
mydata = read.table("letters.txt")
mydata
let_data = generate_corrupt(mydata, 50)
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
let_data
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
library(nnet)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
class(let_data$letter)
let_data$letter
as.factor(let_data$letter)
let_data$letter = as.factor(let_data$letter)
let_data
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE, entropy = TRUE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
model.nnet
model.nnew
predict(model.nnew, newdata = let_data)
predict(model.nnew, newdata = let_data, type = "class")
results = predict(model.nnew, newdata = let_data, type = "class")
results
let_data$letter
trc <- trainControl (method="repeatedcv", number=10, repeats=10)
caret.nnet.model <- train (
letter ~.,
data = let_data,
method='mlp',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE, entropy = FALSE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500,  softmax = TRUE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500,  softmax = TRUE)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
model.nnew
trc <- trainControl (method="repeatedcv", number=10, repeats=10)
library(nnet)
library(caret)
trc <- trainControl (method="repeatedcv", number=10, repeats=10)
caret.nnet.model <- train (
letter ~.,
data = let_data,
method='nnet',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
caret.nnet.model
test_data = generate_corrupt(mydata, 100)
test_resuts = predict(caret.nnet.model, test_data)
test_resuts
test_data$letter
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
new_data$letter = as.factor(new_data$letter)
return(new_data)
}
test_data = generate_corrupt(mydata, 100)
test_data$letter
confusionMatrix(results, test_data$letter)
?confusionMatrix
summary(results)
results
train_data = generate_corrupt(mydata, 50)
test_data = generate_corrupt(mydata, 100)
trc <- trainControl (method="repeatedcv", number=10, repeats=10)
caret.nnet.model <- train (
letter ~.,
data = let_data,
method='nnet',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
test_results = predict(caret.nnet.model, test_data)
test_results
test_data$letter
confusionMatrix(test_results, test_data$letter)
rpois(50, 1.01)
rpois(100, 1.01)
train_data = generate_corrupt(mydata, 500)
test_data = generate_corrupt(mydata, 100)
train_data = generate_corrupt(mydata, 500)
test_data = generate_corrupt(mydata, 100)
trc <- trainControl (method="repeatedcv", number=10, repeats=10)
caret.nnet.model <- train (
letter ~.,
data = let_data,
method='nnet',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
warnings()
summary(train_data$letter)
trc <- trainControl (method="repeatedcv", number=10, repeats=1)
caret.nnet.model <- train (
letter ~.,
data = train_data,
method='nnet',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
test_results = predict(caret.nnet.model, test_data)
confusionMatrix(test_data$letter, test_results)
length(test_results)
length(test_data$letter)
confusionMatrix(test_data$letter, test_results)
caret.nnet.model
train_data = generate_corrupt(mydata, 1000)
test_data = generate_corrupt(mydata, 300)
trc <- trainControl (method="repeatedcv", number=10, repeats=5)
caret.nnet.model <- train (
letter ~.,
data = train_data,
method='nnet',
#TODO poner la métrica F1 score
metric = "Accuracy",
#tuneGrid = expand.grid(.k = posK),
trControl=trc)
test_results = predict(caret.nnet.model, test_data)
confusionMatrix(test_data$letter, test_results)
caret.nnet.model
rpois(50, 1.01)
library(nnet)
library(caret)
mydata = read.table("letters.txt")
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
new_data$letter = as.factor(new_data$letter)
return(new_data)
}
train_data = generate_corrupt(mydata, 1000)
test_data = generate_corrupt(mydata, 300)
trc <- trainControl (method="repeatedcv", number=10, repeats=5)
caret.nnet.model <- train (
letter ~.,
data = train_data,
method='nnet',
metric = "Accuracy",
trControl=trc)
caret.nnet.model
test_results = predict(caret.nnet.model, test_data)
confusionMatrix(test_data$letter, test_results)
caret.nnet.model
test_data2 = generate_corrupt(mydata, 1000)
test_results2 = predict(caret.nnet.model, test_data2)
confusionMatrix(test_data$letter, test_results2)
confusionMatrix(test_data2$letter, test_results2)
test_results = predict(caret.nnet.model, test_data)
confusionMatrix(test_data$letter, test_results)
confusionMatrix(test_data$letter, test_results)
confusionMatrix(test_data$letter, test_results)
