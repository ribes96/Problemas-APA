install.packages("rJava")
a = 1,2,3,4
a = [1,2,3,4]
a = tuple(1,2)
a = c(1,2,3,4)
rm(a)
X1 = c(1,3,3,5,5,6,8,9)
X2 = c(2,3,5,4,6,5,4,8)
cov(X1,X2)
cov(X1,X1)
cov(X1,X1,X1)
M = cbind(c(cov(X1,X1),cov(X1,X2)),c(cov(X1,X2),cov(X1,X2)))
M
M = cbind(c(cov(X1,X1),cov(X1,X2)),c(cov(X1,X2),cov(X2,X2)))
M
M = cbind(c(cov(X1,X1),cov(X1,X2)),c(cov(X2,X1),cov(X2,X2)))
M
var(X1)
var(X2)
Z = cbind(X1,X2)
Z
cov(Z)
X = cbind(X1,X2)
X
cov(X)
S = cov(X)
eigen(S)
eigen(S, symetric=F)
eigen(S, symmetric=F)
eigen(S, symmetric=T)
eigen(S)
plot(X1,X2)
X1 = c(1,3,3,5,5,6,8,9)
X2 = c(2,3,5,4,6,5,4,8)
X = cbind(X1,X2)
S = cov(X)
eigen(S)
plot(X1,X2)
S
eigen(S)
S
S
?eigen
eigen(S, only.values = T)
S = cov(X)
S
x = matrix(1:5, ncol = 1)
x
m = matrix(1:25, ncol = 5)
m
x %*% m
t(x) %*% m
?do.call
f = function(model, params) {
res = do.call(what = model, args = params)
return(max(res))
}
runif(1,1,1)
runif(1,1,3)
runif(10,1,3)
f(runif, list(10,1,3))
f(runif, list(10,1,3))
f(runif, list(10,1,3))
abs(-5)
abs(c(1,2,4))
f(abs, c(-1,-2,-3,1,2,3))
f(abs, list(-1,-2,-3,1,2,3))
f(abs, list(c(-1,-2,-3,1,2,3))
;
f(abs, list(c(-1,-2,-3,1,2,3)))
f(abs, list(c(-1,-2,-3,1,2,3,-8)))
library("caret")
library("mlbench")
data(Sonar)
Sonar
Sys.getenv()
Sys.getenv()$names
a = Sys.getenv()
str(a)
str(a)
summary(a)
a[1]
a[1,1]
dim(a)
clas(a)
class(a)
?Dlist
a[1]
class(a[1])
a[1][1]
a[1][1][1]
a[1][1][2]
a[1]
a[2]
a[CLUTTER_IM_MODULE]
a
globalenv()
a = globalenv()
class(a)
summary(a)
str(a)
environment()
search()
s
ls()
environment()
str(a)
rf = c(
0.451,
0.470,
0.499,
0.517,
0.537,
0.545,
0.554,
0.555
)
nest = c(
1,2,5,10,20,50,100,200
)
plot(type = "l", nest, rf)
plot(type = "l", nest, rf, xlab = "Number of estimators", ylab = "Accuracy", main = "Accuracy on Random Forest")
boost = c(
0.481,
0.504,
0.515,
0.521,
0.531,
0.540,
0.546,
0.547
)
plot(type = "l", nest, boost, xlab = "Number of estimators", ylab = "Accuracy", main = "Accuracy on AdaBoost")
mydata = read.table("letters.txt")
getwd()
setwd("/home/hobber/git/Problemas-APA/Lista5/P7")
mydata = read.table("letters.txt")
nchanges = rpois(20,1.01)
class(mydata)
mydata
head(mydata)
corrupt = function(bit_vector, nchanges) {
changes = sample(35, nchanges)
g = rep(35, 0)
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
a = rep(10,1)
a
a = rep(1,10)
a
b = corrupt(a, 5)
?rep
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(length(bit_vector), 0)
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
b = corrupt(a, 5)
b
bit_vector = rep(1,10)
nchanges = 5
bit_vector
changes = sample(length(bit_vector), nchanges)
changes
g = rep(length(bit_vector), 0)
g
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
a
b = corrupt(a,5)
b
mydata
tirabits = mydata[1,]
tirabits
class(tirabits)
tirabits = mydata[1,-36]
tirabits
tirabits
corrupt(tirabits, 5)
?sample
g = sample(1:nrow(df), n, replace = TRUE)
g = sample(1:26, n, replace = TRUE)
g = sample(1:26, 50, replace = TRUE)
g
ch = rpois(n, 1.01)
ch = rpois(50, 1.01)
ch
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
}
mydata
b = generate_corrupt(mydata, 50)
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
head(b)
mydata[1,36]
mydata = read.table("letters.txt")
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
nchanges =
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
}
return(new_data)
}
df = mydata
n = 50
changes = sample(length(bit_vector), nchanges)
g = sample(1:nrow(df), n, replace = TRUE)
g
ch = rpois(n, 1.01)
ch
new_data = data.frame()
new_data
i = 1
elem = g[i]
elem
df[elem,-36]
new_vector = corrupt(df[elem, -36], ch[i])
new_vector
ch[i]
newrow = c(new_vector, df[elem, 36])
newrow
df[elem,36]
class(new_vector)
class(mydata[1,])
new_vector = as.data.frame(corrupt(df[elem, -36], ch[i]))
new_vector
new_vector = corrupt(df[elem, -36], ch[i])
new_vector
newrow = c(new_vector, df[elem, 36])
newrow
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data
new_data[i,36] = df[elem, 36]
new_data
ncol(new_data)
df[elem, 36]
df[i, 36]
new_data[i, 36]
new_data[i,36] = df[elem, 36]
new_data[i,36]
mydata
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
new_data
rm(new_data)
new_data = data.frame()
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
new_data
mydata = read.table("letters.txt")
corrupt = function(bit_vector, nchanges) {
changes = sample(length(bit_vector), nchanges)
g = rep(0, length(bit_vector))
for (n in changes) {
g[n] = 1
}
new = as.numeric(xor(bit_vector, g))
return(new)
}
generate_corrupt = function(df, n) {
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
nm = c(1:36, "letter")
nm
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
b = generate_corrupt(mydata, 50)
b
library(nnet)
?nnet
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
let_data = generate_corrupt(mydata, 50)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
let_data
colnames(let_data)
head(let_data)
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500)
class(let_data)
class(let_data[1,1])
?as.factor
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
#new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
let_data
class(let_data[1,36])
?nnet
model.nnew = nnet(letter ~ ., data = let_data, size = 10, maxit = 500, linout = FALSE, softmax = TRUE)
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.factor(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
let_data
class(let_data[1,36])
generate_corrupt = function(df, n) {
nm = c(1:35, "letter")
g = sample(1:nrow(df), n, replace = TRUE)
ch = rpois(n, 1.01)
new_data = data.frame()
for (i in 1:length(g)) {
elem = g[i]
new_vector = corrupt(df[elem, -36], ch[i])
newrow = c(new_vector, df[elem, 36])
new_data = rbind(new_data, newrow)
new_data[i,36] = as.character(df[elem, 36])
}
colnames(new_data) = nm
return(new_data)
}
let_data = generate_corrupt(mydata, 50)
